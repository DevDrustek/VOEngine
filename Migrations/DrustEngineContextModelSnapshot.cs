// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using VBEngine.Models;

#nullable disable

namespace VBEngine.Migrations
{
    [DbContext(typeof(DrustEngineContext))]
    partial class DrustEngineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status_type", new[] { "Pending", "Prepareing", "Delivering", "Completed" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VBEngine.Models.Offer", b =>
                {
                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<NpgsqlRange<DateOnly>>>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datemultirange");

                    b.Property<int>("OfferStatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("RequestedDate")
                        .HasColumnType("time with time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("OfferId")
                        .HasName("Offer_pkey");

                    b.HasIndex("OfferStatusId");

                    b.ToTable("Offer", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.OfferStatus", b =>
                {
                    b.Property<int>("OfferStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("OfferStatus1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OfferStatus");

                    b.HasKey("OfferStatusId")
                        .HasName("OfferStatus_pkey");

                    b.ToTable("OfferStatus", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeliveredDate")
                        .HasColumnType("time with time zone");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("RequestedDate")
                        .HasColumnType("time with time zone");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderId")
                        .HasName("Order_pkey");

                    b.HasIndex("OrderStatus");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("OrderStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderStatusId")
                        .HasName("OrderStatus_pkey");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('providers_providerid_seq'::regclass)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProviderId")
                        .HasName("providers_pkey");

                    b.ToTable("Provider", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.ProviderService", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("AddedDate")
                        .HasColumnType("date");

                    b.HasKey("ProviderId", "ServiceId")
                        .HasName("ProviderId");

                    b.ToTable("ProviderService", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.QoS", b =>
                {
                    b.Property<int>("QoSid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("QoSId")
                        .HasDefaultValueSql("nextval('qos_qosid_seq'::regclass)");

                    b.Property<decimal>("Availability")
                        .HasColumnType("numeric");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<decimal>("Reliability")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ResponseTime")
                        .HasColumnType("numeric");

                    b.HasKey("QoSid")
                        .HasName("qos_pkey");

                    b.HasIndex("ProviderId");

                    b.ToTable("QoS", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.Request", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RequesterId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequsetDetail")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("RequsetServices")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<int>("RequsetStatus")
                        .HasColumnType("integer");

                    b.HasKey("RequestId")
                        .HasName("requests_pkey");

                    b.HasIndex("RequsetStatus");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.RequestStatus", b =>
                {
                    b.Property<int>("RequsetStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RequsetStatusId")
                        .HasName("RequestStatus_pkey");

                    b.ToTable("RequestStatus", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.RequsetDetail", b =>
                {
                    b.Property<Guid>("RequestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("RequestDetailId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequsetDetail");
                });

            modelBuilder.Entity("VBEngine.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('services_serviceid_seq'::regclass)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ServiceId")
                        .HasName("services_pkey");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("VBEngine.Models.Offer", b =>
                {
                    b.HasOne("VBEngine.Models.OfferStatus", "OfferStatus")
                        .WithMany("Offers")
                        .HasForeignKey("OfferStatusId")
                        .IsRequired()
                        .HasConstraintName("OfferStatusKey");

                    b.Navigation("OfferStatus");
                });

            modelBuilder.Entity("VBEngine.Models.Order", b =>
                {
                    b.HasOne("VBEngine.Models.OrderStatus", "OrderStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatus")
                        .HasConstraintName("Order_OrderStatus");

                    b.Navigation("OrderStatusNavigation");
                });

            modelBuilder.Entity("VBEngine.Models.QoS", b =>
                {
                    b.HasOne("VBEngine.Models.Provider", "Provider")
                        .WithMany("Qos")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("qos_providerid_fkey");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("VBEngine.Models.Request", b =>
                {
                    b.HasOne("VBEngine.Models.RequestStatus", "RequsetStatusNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("RequsetStatus")
                        .IsRequired()
                        .HasConstraintName("Request_RequestStatus");

                    b.Navigation("RequsetStatusNavigation");
                });

            modelBuilder.Entity("VBEngine.Models.RequsetDetail", b =>
                {
                    b.HasOne("VBEngine.Models.Request", null)
                        .WithMany("RequsetDetails")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("VBEngine.Models.OfferStatus", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("VBEngine.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VBEngine.Models.Provider", b =>
                {
                    b.Navigation("Qos");
                });

            modelBuilder.Entity("VBEngine.Models.Request", b =>
                {
                    b.Navigation("RequsetDetails");
                });

            modelBuilder.Entity("VBEngine.Models.RequestStatus", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
